show databases;
-> show all the available databases in the system

create databases <file_name>;
-> creates a new database

use <file_name>;
-> start working on the database

drop database <file_name>;
-> delete the database

show tables;
-> to show all tables in a particular database 

--> to create a tables
create table <file_name>(
    title VARCHAR(30)   
      |      |     |
 attribute  type  maxLength
    VARCHAR == string

    id Int
    content VARCHAR(300)
)

desc <file_name>;
-> list of attributes of table

not null
-> used in creating table attributes whose values can never be null

auto_increment
-> automatically increments the value by 1 
also we have to give a primary key so that it could recognize it
ex - Id Int auto_increment
    primary key(Id);

--> Insert in table
insert into <file_name> (title,id, content) values (val1,val2,val3);
// if we want to put multiple inputs at same time -> 
insert into <file_name> (title,id, content) values (val1,val2,val3),(val1,val2,val3);

--> Retreive data from tables
select <attr1>,<attr2>... from <file_name>;
// for getting all attributes
select * from <file_name>;
// for getting chosen data      --> where clause
select * from <file_name> WHERE id > 2;  -> it will give me only that rows whose data had id attribute greater than 2.
// for getting data with operating with strings   --> like clause
select * from <file_name> where <attr> LIKE "%string%";
ex - select * from <file_name> where title LIKE "abc%";  // it gives all the rows with data having title whose prefix matches with abc and after that it can have anything

// we can also use AND ,OR operator with where clause


--> sorting of data
select * from <file_name> order by <attr> (DESC or ASC);
// we can also put another condition in case of conflict in first condition
select * from <file_name> order by <attr1> (DESC or ASC), <attr2> (DESC or ASC);
// we can also put limit on data to be shown 
select * from <file_name> order by <attr> desc LIMIT 2;
// we can also choose how many previous data we have to leave
select * from <file_name> order by <attr> desc limit 2 OFFSET 2;

--> update data
UPADTE <file_name> set <attr> = " ... " where <attr> = " ... ";

--> add new column
ALTER table <file_name> ADD <attr_name> <attr_type>;

--> delete column 
ALTER table <file_name> DROP <attr_name>;

--> we can join two different tables with same key 
select * from <file_name> JOIN <file_name> ON file1.key = file2.key;



----> ORM
Object Relatinal mapper
libraries that helps you to actually do database queries but instead write sql system you write object oriented system








-- COMMANDS USED IN SOCIAL PROJECT

->  create table users(id INT AUTO_INCREMENT PRIMARY KEY NOT NULL , username VARCHAR(45) NOT NULL, email VARCHAR(45) NOT NULL, password VARCHAR(200) NOT NULL, name VARCHAR(45) NOT NULL, coverPic VARCHAR(100), profilePic VARCHAR(100), city VARCHAR(45), website VARCHAR(45));

-> ALTER TABLE users MODIFY COLUMN id INT UNIQUE AUTO_INCREMENT;
// used when i forgot to enter unique in id attribute
// we have to also mention datatype of that attribute else it will throw error

-> CREATE TABLE posts (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY UNIQUE,
    description VARCHAR(200),
    img VARCHAR(200),
    userId INT,
    FOREIGN KEY (userId) REFERENCES users(id) ON DELETE CASCADE ON UPDATE CASCADE
);
// here i have attached userId as foreign key to id in users table and also added cascading.

-> SELECT p.*, u.id AS userId,name,profilePic FROM posts AS p JOIN users AS u ON (u.id = p.userId) JOIN relations AS r ON (p.userId = r.followedUserId AND r.followerUserId = ?
// we are using posts as p and users as u and then we join tables for data where condition matches . also here we selected all from p and only specific things from users table and then we joined another table where we are are checking for both should follow each other

-> ALTER TABLE posts CHANGE COLUMN `description` `desc` VARCHAR(200);
// changed field name from description to desc